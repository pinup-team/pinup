plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.node-gradle.node' version '7.1.0'
	id 'org.asciidoctor.jvm.convert' version '4.0.4'
}

group = 'kr.co'
version = '0.0.1-BETA'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	implementation platform('software.amazon.awssdk:bom:2.20.15')
	implementation 'software.amazon.awssdk:core:2.20.15'
	implementation 'software.amazon.awssdk:s3:2.20.15'

	implementation "org.testcontainers:localstack:1.16.3"
	testImplementation "cloud.localstack:localstack-utils:0.2.20"

	// oauth ÏùòÏ°¥ÏÑ±
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	// ÏÑ§Ï†ïÍ∞í Îçî Íµ¨Ï°∞Ï†ÅÏúºÎ°ú Í¥ÄÎ¶¨ÌïòÍ∏∞ ÏúÑÌïú ÏùòÏ°¥ÏÑ±
	implementation 'org.springframework.boot:spring-boot-configuration-processor'
	// webclinet
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	// entitymanager Ïó∞Í≤∞
	implementation 'org.javassist:javassist:3.15.0-GA'
	// google people
	implementation 'com.google.apis:google-api-services-people:v1-rev20210419-1.31.0'
	// wireMock
	testImplementation 'org.wiremock:wiremock-standalone:3.9.1'

	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.security:spring-security-test'

	// rest-assured(java dsl)
	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'io.rest-assured:json-path'

	// REST Docs Í¥ÄÎ†® ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä (ÌÖåÏä§Ìä∏ ÏΩîÎìúÏóêÏÑú REST Docs ÏÇ¨Ïö© Í∞ÄÎä•)
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.3'
	testImplementation 'org.springframework.restdocs:spring-restdocs-core:3.0.3' // üëà Î™ÖÏãúÏ†ÅÏúºÎ°ú Ï∂îÍ∞Ä!
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.3'

}
ext {
	snippetsDir = file('build/generated-snippets')  // REST Docs Ïä§ÎãàÌé´ ÏÉùÏÑ± ÏúÑÏπò ÏÑ§Ï†ï
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	outputs.dir snippetsDir
}

node {
	version = '22.14.0'
	npmVersion = '11.2.0'
	download = true
}

// todo : Ï∂îÌõÑÏóê Ï†ÑÏó≠ Ìï®ÏàòÎì§ ÏàòÏ†ïÌïòÎ©¥ Ï†ÅÏö©
//def terserCacheFile = layout.buildDirectory.file("terser-cache.json")
//tasks.register("initializeTerserCache") {
//	doFirst {
//		def cacheFile = terserCacheFile.get().asFile
//		if (!cacheFile.exists()) {
//			cacheFile.parentFile.mkdirs()
//			cacheFile.text = '{}' // Îπà JSON ÌååÏùº ÏÉùÏÑ±
//		}
//	}
//}

// ÎèôÏ†Å Minify ÌÉúÏä§ÌÅ¨ ÏÉùÏÑ±
def minifyTasks = []
fileTree('src/main/resources/static/js').each { file ->
	if (file.name.endsWith('.js') && !file.name.endsWith('.min.js')) {
		def taskName = "minifyJs_${file.name.replace('.js', '')}"
		tasks.register(taskName, NpmTask) {
			// Ï∂úÎ†• Í≤ΩÎ°úÎ•º File Í∞ùÏ≤¥Î°ú ÏßÅÏ†ë ÏÉùÏÑ±
			def outputFile = layout.buildDirectory.file("resources/main/static/js/${file.name.replace('.js', '.min.js')}").get().asFile
			args = [
					'run', 'minify', '--',
					file.absolutePath,
					'--output', outputFile.absolutePath,
					'--compress', 'passes=3',
					'--mangle', 'toplevel=false',
//					'--name-cache', terserCacheFile.get().asFile.absolutePath
//					'--mangle-props', 'reserved=["classList","querySelector","getAttribute","setAttribute","textContent"]'
			]
			dependsOn npmInstall
			doFirst {
				outputFile.parentFile.mkdirs()
			}
		}
		minifyTasks << tasks[taskName]
	}
}

processResources {
	if (project.hasProperty('prod')) {
		exclude 'static/js/*.js'
	}
}

// REST Docs Í∏∞Î∞òÏúºÎ°ú HTML Î¨∏ÏÑú ÏÉùÏÑ±ÌïòÎäî ÌÉúÏä§ÌÅ¨ ÏàòÏ†ï (Í∏∞Ï°¥ Îì±Î°ùÎêú ÌÉúÏä§ÌÅ¨ ÏÇ¨Ïö©)
tasks.named('asciidoctor') {
	inputs.dir snippetsDir             // REST Docs Ïä§ÎãàÌé´ ÏûÖÎ†• Í≤ΩÎ°ú ÏßÄÏ†ï
	configurations 'asciidoctorExt'    // asciidoctor ÌôïÏû• ÏÑ§Ï†ï
	dependsOn test                     // ÌÖåÏä§Ìä∏ ÌÉúÏä§ÌÅ¨ ÏôÑÎ£å ÌõÑ Î¨∏ÏÑú ÏÉùÏÑ±
}

bootJar {
	enabled = true
	dependsOn minifyTasks
	dependsOn asciidoctor              // Î¨∏ÏÑú ÏÉùÏÑ± ÌõÑ jar ÏÉùÏÑ±
	from("${asciidoctor.outputDir}") {
		into 'static/docs'             // Î¨∏ÏÑú Ï†ëÍ∑º Í≤ΩÎ°ú (http://localhost:8080/docs/)
	}
}

jar {
	enabled = false
}